#!/usr/bin/env python3

import os
import shutil
import subprocess
from pathlib import Path

COLUMNS = shutil.get_terminal_size().columns
SHLVL = int(os.environ['SHLVL'])
HOME = Path.home()

BLUE = 153
YELLOW = 'yellow'
ORANGE = 180
MAGENTA = 'magenta'
GREEN = 'green'
GRAY = 237

def main():
    prompt_lines = get_prompt_lines()
    num_prompt_lines = len(prompt_lines)
    separator = colorize('┈' * COLUMNS, color=GRAY)

    strs = ['\n', separator, '\r']
    for i, line in enumerate(prompt_lines):
        if i == 0:
            # the first line should have a trailing space, to write
            # over the separator line
            line += ' '
        elif i < num_prompt_lines - 1:
            line = colorize('├─ ', color=GRAY) + line
        else:
            line = colorize('└─ ', color=GRAY) + line

        strs.extend([line, '\n'])

    output(*strs)

### Building prompt ###

def get_prompt_lines():
    prompter = Prompter()

    # add shell level
    if SHLVL > 1:
        prompter.add_prompt_part('{' + str(SHLVL) + '}', color=YELLOW)

    # add CWD
    cwd = get_cwd()
    cwd_parent = cwd.parent
    cwd_display = cwd.as_posix()
    while len(cwd_display) > COLUMNS:
        cwd_parent = cwd_parent.parent
        next_cwd_display = (cwd_parent / '...' / cwd.name).as_posix()
        # handle when terminal is narrower than shortest display
        if cwd_display == next_cwd_display:
            break
        cwd_display = next_cwd_display
    prompter.add_prompt_part(cwd_display, color=BLUE)

    # add git info
    if is_in_git_repo():
        add_branch_info(prompter)

        commit = get_stdout(['git', 'rev-parse', '--short=12', 'HEAD'])
        commit = commit or '<null>'
        prompter.add_prompt_part(f'({commit})', color=MAGENTA)

    return prompter.get_lines()

def add_branch_info(prompter):
    branch_display = get_stdout(['git', 'bb', '--display'])
    if branch_display:
        prompter.add_prompt_part(f'[{branch_display}]', color=GREEN)
        return

    # check if we're in a rebase
    rebase_branch_name = get_rebase_branch_name()
    if rebase_branch_name:
        prompter.add_prompt_part(f'[rebasing: {rebase_branch_name}]', color=ORANGE)
        return

    prompter.add_prompt_part('[N/A]', color=YELLOW)

class Prompter:
    def __init__(self, *, sep=' ', margin_right=5):
        self._sep = sep
        self._margin_right = margin_right

        self._prompt_lines = []
        self._buffer = []
        self._buffer_len = 0

    def add_prompt_part(self, s, *, color):
        s_len = len(s)

        if self._buffer_len + len(self._sep) + s_len + self._margin_right > COLUMNS:
            self._flush_buffer()

        if color:
            s = colorize(s, color=color)

        self._buffer.append(s)
        self._buffer_len += s_len

    def get_lines(self):
        self._flush_buffer()
        return self._prompt_lines

    def _flush_buffer(self):
        if self._buffer_len > 0:
            buf = self._sep.join(self._buffer)
            self._prompt_lines.append(buf)

        self._buffer = []
        self._buffer_len = 0

def get_cwd():
    cwd = Path.cwd()

    try:
        cwd = Path('~') / cwd.relative_to(HOME)
    except ValueError:
        pass

    return cwd

def is_in_git_repo():
    proc = subprocess.run(
        ['git', 'rev-parse', '--is-inside-work-tree'],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    return proc.returncode == 0

def get_rebase_branch_name():
    rebase_dir = get_stdout(['git', 'rev-parse', '--git-path', 'rebase-merge'])
    rebase_branch_name_file = Path(rebase_dir) / 'head-name'
    try:
        return rebase_branch_name_file.read_text().strip().removeprefix('refs/heads/')
    except FileNotFoundError:
        return None

def get_stdout(*args, **kwargs):
    """
    Get the stdout of running the given process.

    Does NOT raise an error on a non-zero exit code.
    """
    proc = subprocess.run(*args, capture_output=True, **kwargs)
    return proc.stdout.decode().strip()

### Printing ###

def colorize(s, *, color):
    return '%F{' + str(color) + '}' + s + '%f'

def output(*strs):
    subprocess.check_call([
        'zsh',
        '-c',
        f'print -P -f "%s" "$@"',
        '_print_prompt_header',
        *strs,
    ])

### Entrypoint ###

if __name__ == '__main__':
    main()
