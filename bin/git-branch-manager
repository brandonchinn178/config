#!/usr/bin/env python3

import abc
import argparse
import contextlib
import sys
from pathlib import Path
from typing import Optional

HERE = Path(__file__).resolve().parent
sys.path.insert(0, HERE.parent.as_posix())

from git_branch_manager.api import *
from git_branch_manager.display import show_branches
from git_branch_manager.git import *
from git_branch_manager.store import *
from git_branch_manager.utils import ANSI, abort

def main() -> None:
    command = parse_args()
    data = load_data()
    try:
        command.run(data)
    except APIError as e:
        abort(str(e), prefix='git-branch-manager')

def parse_args() -> "CLICommand":
    parser = argparse.ArgumentParser()

    parser.add_argument('branch', nargs='?')
    parser.add_argument('--json', action='store_true')

    group = parser.add_mutually_exclusive_group()
    group.add_argument('--fzf', action='store_true', default=None)
    group.add_argument('--current', action='store_true', default=None)
    group.add_argument('--list', '-l', action='store_true', default=None)
    group.add_argument('--base', action='store_true', default=None)
    group.add_argument('--deps', action='store_true', default=None)
    group.add_argument('--display', action='store_true', default=None)
    group.add_argument('--rename-to')
    group.add_argument('--set-base')
    group.add_argument('--unset-base', action='store_true')
    group.add_argument('--add-dep', metavar='DEP', nargs='+')
    group.add_argument('--rm-dep', metavar='DEP', nargs='+')
    group.add_argument('--set-group')
    group.add_argument('--unset-group', action='store_true')
    group.add_argument('--add-tag')
    group.add_argument('--rm-tag')
    group.add_argument('--get-default-base', action='store_true', default=None)
    group.add_argument('--set-default-base')
    group.add_argument('--unset-default-base', action='store_true', default=None)
    group.add_argument('--clear', action='store_true', default=None)

    args = parser.parse_args()

    if args.fzf:
        return CLICommandFzf()

    if args.current:
        return CLICommandShowBranch(branch=args.branch, as_json=args.json)

    if args.list:
        if args.branch is not None:
            raise parser.error('`--list` or `-l` cannot be specified with any other arguments')

        return CLICommandListAll(as_json=args.json)

    if args.base:
        return CLICommandGetBase(branch=args.branch)

    if args.deps:
        return CLICommandGetDeps(branch=args.branch)

    if args.display:
        return CLICommandDisplay(branch=args.branch)

    if args.rename_to:
        return CLICommandRenameTo(branch=args.branch, new_branch=args.rename_to)

    if args.set_base:
        return CLICommandSetBase(branch=args.branch, base=args.set_base)

    if args.unset_base:
        return CLICommandUnsetBase(branch=args.branch)

    if args.add_dep:
        return CLICommandAddDep(branch=args.branch, deps=args.add_dep)

    if args.rm_dep:
        return CLICommandRemoveDep(branch=args.branch, deps=args.rm_dep)

    if args.get_default_base:
        return CLICommandGetDefaultBase()

    if args.set_default_base:
        return CLICommandSetDefaultBase(base_branch=args.set_default_base)

    if args.unset_default_base:
        return CLICommandUnsetDefaultBase()

    if args.set_group:
        return CLICommandSetGroup(branch=args.branch, group=args.set_group)

    if args.unset_group:
        return CLICommandUnsetGroup(branch=args.branch)

    if args.add_tag:
        return CLICommandAddTag(branch=args.branch, tag=args.add_tag)

    if args.rm_tag:
        return CLICommandRemoveTag(branch=args.branch, tag=args.rm_tag)

    if args.clear:
        return CLICommandClear(branch=args.branch)

    return CLICommandShowBranches()

##### CLI Commands #####

class CLICommand(abc.ABC):
    @abc.abstractmethod
    def run(self, data: BranchData):
        pass

class CLIBranchCommand(CLICommand):
    def __init__(self, *, branch: Optional[str]):
        self._branch = branch

    @property
    def branch(self) -> str:
        return resolve_branch(self._branch)

class CLICommandFzf(CLICommand):
    def run(self, data: BranchData):
        branches = get_branches(data)
        group_width = max(len(branch.group or "") for branch in branches)
        for branch in branches:
            group = f" {ANSI.YELLOW}[{branch.group}]{ANSI.RESET}" if branch.group else ""
            print(branch.name + group)

class CLICommandListAll(CLICommand):
    def __init__(self, *, as_json: bool = False):
        super().__init__()
        self._as_json = as_json

    def run(self, data: BranchData):
        print_branch_info(data, get_all_registered_branches(data), as_json=self._as_json)

class CLICommandGetBase(CLIBranchCommand):
    def run(self, data: BranchData):
        with contextlib.suppress(NotOnBranchError):
            info = get_branch_info(data, self.branch)
            if info and info.base:
                print(info.base)

class CLICommandGetDeps(CLIBranchCommand):
    def run(self, data: BranchData):
        with contextlib.suppress(NotOnBranchError):
            info = get_branch_info(data, self.branch)
            if info:
                for dep in info.deps:
                    print(dep)

class CLICommandDisplay(CLIBranchCommand):
    def run(self, data: BranchData):
        with contextlib.suppress(NotOnBranchError):
            branch_display = display_branch_info(data, self.branch)
            print(branch_display)

class CLICommandRenameTo(CLIBranchCommand):
    def __init__(self, *, branch: Optional[str], new_branch: str):
        super().__init__(branch=branch)
        self._new_branch = new_branch

    def run(self, data: BranchData):
        # allow renaming branches that don't exist anymore
        try:
            branch = self.branch
        except MissingBranchError as e:
            branch = e.branch

        rename_branch(data, branch, self._new_branch)
        save_data(data)
        print(f'Renamed branch `{branch}` to `{self._new_branch}`')

class CLICommandSetBase(CLIBranchCommand):
    def __init__(self, *, branch: Optional[str], base: str):
        super().__init__(branch=branch)
        self._base = base

    def run(self, data: BranchData):
        base_branch = resolve_branch(self._base)
        set_base_branch(data, self.branch, base_branch=base_branch)
        save_data(data)
        print(f'Set `{base_branch}` as base branch for `{self.branch}`')

class CLICommandUnsetBase(CLIBranchCommand):
    def __init__(self, *, branch: str | None):
        super().__init__(branch=branch)

    def run(self, data: BranchData):
        unset_base_branch(data, self.branch)
        save_data(data)
        print(f'Unset base branch for `{self.branch}`')

class CLICommandAddDep(CLIBranchCommand):
    def __init__(self, *, branch: Optional[str], deps: str):
        super().__init__(branch=branch)
        self._deps = deps

    def run(self, data: BranchData):
        deps = [resolve_branch(dep) for dep in self._deps]
        if self.branch in deps:
            raise Exception("Cannot add same branch as dependency")

        add_dep_branches(data, self.branch, deps)
        save_data(data)
        print(f'Added branch dependencies for `{self.branch}`: ' + ', '.join(self._deps))

class CLICommandRemoveDep(CLIBranchCommand):
    def __init__(self, *, branch: Optional[str], deps: str):
        super().__init__(branch=branch)
        self._deps = deps

    def run(self, data: BranchData):
        rm_dep_branches(data, self.branch, self._deps)
        save_data(data)
        print(f'Removed branch dependencies for `{self.branch}`: ' + ', '.join(self._deps))

class CLICommandGetDefaultBase(CLICommand):
    def run(self, data: BranchData):
        print(f'Default base branch is: {get_default_base_branch(data)}')

class CLICommandSetDefaultBase(CLICommand):
    def __init__(self, *, base_branch: str):
        self._base_branch = base_branch

    def run(self, data: BranchData):
        set_default_base_branch(data, self._base_branch)
        save_data(data)
        print(f'Set default base branch to `{self._base_branch}` in branch-manager database')

class CLICommandUnsetDefaultBase(CLICommand):
    def run(self, data: BranchData):
        set_default_base_branch(data, None)
        save_data(data)
        print('Unset default base branch in branch-manager database')

class CLICommandSetGroup(CLIBranchCommand):
    def __init__(self, *, branch: str | None, group: str):
        super().__init__(branch=branch)
        self._group = group

    def run(self, data: BranchData):
        set_group(data, self.branch, self._group)
        save_data(data)
        print(f'Set group for `{self.branch}`: {self._group}')

class CLICommandUnsetGroup(CLIBranchCommand):
    def run(self, data: BranchData):
        unset_group(data, self.branch)
        save_data(data)
        print(f'Unset group for branch `{self.branch}`')

class CLICommandAddTag(CLIBranchCommand):
    def __init__(self, *, branch: str | None, tag: str):
        super().__init__(branch=branch)
        self._tag = tag

    def run(self, data: BranchData):
        add_tag(data, self.branch, self._tag)
        save_data(data)
        print(f'Added tag `{self._tag}` for branch `{self.branch}`')

class CLICommandRemoveTag(CLIBranchCommand):
    def __init__(self, *, branch: str | None, tag: str):
        super().__init__(branch=branch)
        self._tag = tag

    def run(self, data: BranchData):
        rm_tag(data, self.branch, self._tag)
        save_data(data)
        print(f'Removed tag `{self._tag}` for branch `{self.branch}`')

class CLICommandClear(CLIBranchCommand):
    def run(self, data: BranchData):
        # allow clearing branches that don't exist anymore
        try:
            branch = self.branch
        except MissingBranchError as e:
            branch = e.branch

        delete_branch(data, branch)
        save_data(data)
        print(f'Deleted branch `{branch}` from branch-manager database')

class CLICommandShowBranch(CLIBranchCommand):
    def __init__(self, *, branch: str, as_json: bool = False):
        super().__init__(branch=branch)
        self._as_json = as_json

    def run(self, data: BranchData):
        print_branch_info(data, [self.branch], as_json=self._as_json)

class CLICommandShowBranches(CLICommand):
    def run(self, data: BranchData):
        branches = get_branches(data)
        show_branches(branches)

def print_branch_info(
    data: BranchData,
    branches: List[str],
    *,
    as_json: bool = False,
) -> None:
    infos = [
        get_branch_info(data, branch, missing_ok=False)
        for branch in branches
    ]

    # order by dependencies
    infos = sorted(infos, key=lambda info: len(info.deps))

    if as_json:
        o = [info.to_json() for info in infos]
        print(json.dumps(o))
    else:
        branch_outputs = [
            '\n'.join([
                *([f"[{info.group}]"] if info.group else []),
                info.name + "".join([f" [{tag}]" for tag in info.tags]),
                *([f' └─ {info.base}'] if info.base is not None else []),
                *(f'    + {dep}' for dep in info.deps),
            ])
            for info in infos
        ]
        print('\n\n'.join(branch_outputs))

##### Entrypoint #####

if __name__ == '__main__':
    main()
