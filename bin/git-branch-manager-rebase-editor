#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys
from pathlib import Path

HERE = Path(__file__).resolve().parent
sys.path.insert(0, HERE.parent.as_posix())

from git_branch_manager.api import get_merge_deps_command

def get_config():
    config_lines = []
    for line in subprocess.check_output(['git', 'config', '--list']).decode().split('\n'):
        if line.strip() == '':
            continue
        elif '=' in line:
            config_lines.append(line.split('=', 1))
        else:
            config_lines[-1][1] += f'\n{line}'
    return dict(config_lines)

ENV = os.environ
CONFIG = get_config()

def main():
    args = parse_args()

    lines = args.file.read_text().split('\n')
    update_rebase_commands(lines, args)
    args.file.write_text('\n'.join(lines))

    editor = get_editor()
    os.execlp(editor, editor, args.file.as_posix())

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'file',
        help='The file containing rebase commands to execute',
        type=Path,
    )
    parser.add_argument(
        '--merge-branch',
        help='Merge the given branch(es) before any other command',
        dest='merge_branches',
        action='append',
        default=[],
    )
    parser.add_argument(
        '--rebase-args',
        help='The rebase arguments, to print as helpful info',
    )
    return parser.parse_args()

def update_rebase_commands(lines, args):
    if len(args.merge_branches) > 0:
        exec_cmd = 'x' if CONFIG.get('rebase.abbreviatecommands') == 'true' else 'exec'
        cmd = ' '.join(get_merge_deps_command(args.merge_branches))
        lines.insert(0, f'{exec_cmd} {cmd}')

    comment_section_start_line = next(
        i
        for i, line in enumerate(lines)
        if line.startswith('# Rebase')
    )
    insert_all(
        lines,
        comment_section_start_line,
        f'# Running: git rebase -i {args.rebase_args}',
        '#',
    )

def get_editor():
    editors = (
        ENV.get('OLD_GIT_SEQUENCE_EDITOR'),
        CONFIG.get('sequence.editor'),
        ENV.get('GIT_EDITOR'),
        CONFIG.get('core.editor'),
        ENV.get('VISUAL'),
        ENV.get('EDITOR'),
        'vi',
    )
    return next(x for x in editors if x)

# https://stackoverflow.com/a/39541404
def insert_all(l, i, *xs):
    l[i:i] = xs

if __name__ == '__main__':
    main()
