#!/usr/bin/env python3

"""Create and checkout a new branch."""

import argparse
import contextlib
import functools
import subprocess
import sys
from pathlib import Path
from typing import List, Optional

HERE = Path(__file__).resolve().parent
sys.path.insert(0, HERE.parent.as_posix())

from git_branch_manager.api import (
    APIError,
    add_dep_branches,
    get_default_base_branch,
    get_merge_deps_command,
    set_base_branch,
    set_group,
)
from git_branch_manager.git import (
    get_current_branch,
    git,
    git_exec,
)
from git_branch_manager.store import BranchData, load_data, save_data
from git_branch_manager.utils import abort as abort_

abort = functools.partial(abort_, prefix='git-branch-manager-make-branch')

### Git ###

def get_modified_files() -> List[str]:
    return git('ls-files', '-m').splitlines()

### Implementation ###

def make_branch(
    *,
    data: BranchData,
    new_branch: str,
    base_branch: str,
    deps: list[str],
    group: str | None,
    persist_modified: bool,
):
    ctx = contextlib.nullcontext
    if len(get_modified_files()) > 0:
        if persist_modified:
            ctx = git_stashed
        else:
            abort('There are modified files')

    with ctx():
        try:
            git_exec("checkout", "-b", new_branch, base_branch)
        except subprocess.CalledProcessError as e:
            abort(str(e))

        set_base_branch(data, new_branch, base_branch=base_branch)
        if deps:
            add_dep_branches(data, new_branch, deps)
        if group:
            set_group(data, new_branch, group)
        save_data(data)

        if deps:
            cmd = get_merge_deps_command(deps)
            print('Running: ' + ' '.join(cmd))
            subprocess.check_call(cmd)

@contextlib.contextmanager
def git_stashed():
    git_exec("stash", "push")
    try:
        yield
    finally:
        git_exec("stash", "pop")

### Entrypoint ###

def main():
    data = load_data()
    args = parse_args(data)

    try:
        make_branch(
            data=data,
            new_branch=args.branch,
            base_branch=args.base,
            deps=_resolve_deps(args.deps),
            group=args.group,
            persist_modified=args.stash,
        )
    except APIError as e:
        abort(str(e))

def _resolve_deps(deps: list[str] | None) -> list[str]:
    if deps is None:
        return []

    return [
        get_current_branch() if dep == "." else dep
        for dep in deps
    ]

def parse_args(data: BranchData):
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        'branch',
        metavar='BRANCH',
        help='The name of the branch to create',
    )
    parser.add_argument(
        'base',
        metavar='BASE',
        nargs='?',
        help='The base branch for the new branch (defaults to %(default)s)',
        default=get_default_base_branch(data),
    )
    parser.add_argument(
        '--deps',
        help="Comma-separated list of branches to add as dependencies. Use '.' to reference the current branch",
    )
    parser.add_argument(
        '--group',
        help="Group to set for the branch",
    )
    parser.add_argument(
        '--stash',
        action='store_true',
        help=(
            'If there are modified files, stash and unstash '
            'the changes while setting up the new branch'
        ),
    )
    return parser.parse_args()

if __name__ == '__main__':
    main()
