#!/usr/bin/env zsh

set -eu -o pipefail

function abort { print "$@" >&2; exit 1 }

function get_last_merge {
    git log --merges -n1 --pretty='format:%H'
}

function git_bb_rebase {
    # proxy to underlying git-rebase if currently in a rebase
    if [[ -d "$(git rev-parse --git-path rebase-merge)" ]]; then
        exec git rebase "$@"
        return
    fi

    local args=("$@")

    # calling with no arguments is equivalent to calling with the given args
    if [[ ${#args} == 0 ]]; then
        args=( 'detect-base' '--onto-base-branch' '--merge-deps' )
    fi

    local parsed_args=()
    local onto_base_branch=0
    local merge_deps=0

    local arg
    for arg in $args; do
        case $arg in
            (last-merge)
                local last_merge="$(get_last_merge)"
                if [[ -z $last_merge ]]; then
                    abort 'error: Could not find a merge commit'
                fi

                parsed_args+=$last_merge
            ;;
            (detect-base)
                # If the current branch IS NOT using the 'git-bb' system, resolve to the last
                # merge commit.
                #
                # If the current branch IS using the 'git-bb' system, we have four scenarios:
                #   1. The commit we branched off from the base branch IS a merge commit
                #   2. The commit we branched off from the base branch IS a merge commit AND
                #      the current branch has dependencies.
                #   3. The commit we branched off from the base branch IS NOT a merge commit
                #   4. The commit we branched off from the base branch IS NOT a merge commit AND
                #      the current branch has dependencies.
                #
                # In scenarios 1, 2, and 4, there should be *some* merge commit in history, so
                # resolve to the latest merge commit. In scenario 3, resolve to the commit we
                # branched off the base branch.

                local target="$(get_last_merge)"

                local base="$(git bb --base)"
                if [[ -n $base ]]; then
                    local base_in_curr_history="$(git merge-base $base HEAD)"
                    local merges_in_curr_history="$(git log --merges "${base_in_curr_history}^".."HEAD")"
                    if [[ -z "${merges_in_curr_history}" ]]; then
                        # this should be scenario 3
                        target=$base_in_curr_history
                    fi
                fi

                if [[ -z $target ]]; then
                    abort 'error: Could not find an appropriate rebase target'
                fi

                parsed_args+=$target
            ;;
            (--onto-base-branch)
                onto_base_branch=1
            ;;
            (--merge-deps)
                merge_deps=1
            ;;
            (*)
                parsed_args+=$arg
            ;;
        esac
    done

    local editor_args=()

    if [[ $onto_base_branch == 1 ]]; then
        local base="$(git bb --base)"
        if [[ -z $base ]]; then
            abort 'Branch is not registered'
        fi

        parsed_args+=("--onto=${base}")
    fi

    if [[ $merge_deps == 1 ]]; then
        editor_args+='--merge-deps'
    fi

    if [[ ${#editor_args} -gt 0 ]]; then
        export OLD_GIT_SEQUENCE_EDITOR="${GIT_SEQUENCE_EDITOR:-}"
        export GIT_SEQUENCE_EDITOR="git-bb-rebase-editor ${editor_args}"
    fi

    exec git rebase -i $parsed_args
}

git_bb_rebase "$@"
