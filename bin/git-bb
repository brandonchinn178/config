#!/usr/bin/env python3

import argparse
import dataclasses
import json
import re
import subprocess
import sys
from enum import Enum
from pathlib import Path
from typing import Dict, List, Optional, TypeVar, Union

##### Main #####

def main() -> None:
    command = parse_args()
    data = load_data()

    if command.mode == CLICommandMode.LIST_ALL:
        for branch in get_all_registered_branches(data):
            print_branch_info(data, branch)
            print()
    elif command.mode == CLICommandMode.SHOW_CURR:
        print_branch_info(data, command.branch)
    elif command.mode == CLICommandMode.GET_BASE:
        try:
            info = get_branch_info(data, command.branch)
            if info:
                print(info.base)
        except NotOnBranchError:
            pass
    elif command.mode == CLICommandMode.GET_DEPS:
        try:
            info = get_branch_info(data, command.branch)
            for dep in info.deps:
                print(dep)
        except NotOnBranchError:
            pass
    elif command.mode == CLICommandMode.GET_DEFAULT_BASE_BRANCH:
        print(get_default_base_branch())
    elif command.mode == CLICommandMode.DISPLAY:
        try:
            branch_display = display_branch_info(data, command.branch)
            print(branch_display)
        except NotOnBranchError:
            pass
    elif command.mode == CLICommandMode.RENAME_TO:
        # allow renaming branches that don't exist anymore
        try:
            branch = command.branch
        except MissingBranchError as e:
            branch = e.branch

        rename_branch(data, branch, command.new_branch)
        save_data(data)
        print(f'Renamed branch `{branch}` to `{command.new_branch}`')
    elif command.mode == CLICommandMode.SET_BASE:
        base_branch = command.base
        if not branch_exists(base_branch):
            raise MissingBranchError(base_branch)

        set_base_branch(data, command.branch, base_branch)
        save_data(data)
        print(f'Set `{base_branch}` as base branch for `{command.branch}`')
    elif command.mode == CLICommandMode.ADD_DEP:
        dep_branch = command.dep
        if not branch_exists(dep_branch):
            raise MissingBranchError(dep_branch)

        add_dep_branch(data, command.branch, dep_branch)
        save_data(data)
        print(f'Added `{dep_branch}` as a branch dependency for `{command.branch}`')
    elif command.mode == CLICommandMode.RM_DEP:
        dep_branch = command.dep

        rm_dep_branch(data, command.branch, dep_branch)
        save_data(data)
        print(f'Removed `{dep_branch}` as a branch dependency for `{command.branch}`')
    elif command.mode == CLICommandMode.CLEAR:
        # allow clearing branches that don't exist anymore
        try:
            branch = command.branch
        except MissingBranchError as e:
            branch = e.branch

        delete_branch(data, branch)
        save_data(data)
        print(f'Deleted branch `{branch}` from base-branch database')
    else:
        raise NotImplementedError

def print_branch_info(data: 'BaseBranchData', branch: str) -> None:
    info = get_branch_info(data, branch)

    if info is None:
        raise UserError(f'Branch `{branch}` is not registered.')

    deps = ', '.join(info.deps)
    print('\n'.join([
        branch,
        f' ├─ base = {info.base}',
        f' └─ deps = [{deps}]',
    ]))

##### Data store #####

@dataclasses.dataclass
class BranchInfo:
    base: str
    deps: List[str]

    @classmethod
    def from_json(cls, o):
        return cls(**o)

    def to_json(self):
        return dataclasses.asdict(self)

@dataclasses.dataclass
class BaseBranchData:
    branches: Dict[str, BranchInfo]

    @classmethod
    def from_json(cls, o):
        branches = {
            branch: BranchInfo.from_json(branch_info)
            for branch, branch_info in o['branches'].items()
        }
        return cls(branches=branches)

    def to_json(self):
        return {
            'branches': {
                branch: branch_info.to_json()
                for branch, branch_info in self.branches.items()
            },
        }

def get_data_path() -> Path:
    git_dir = git('rev-parse', '--git-common-dir')
    return Path(git_dir) / 'base-branch-info'

def load_data() -> BaseBranchData:
    data_path = get_data_path()

    if not data_path.exists():
        return BaseBranchData(branches={})

    data_text = data_path.read_text()
    return BaseBranchData.from_json(json.loads(data_text))

def save_data(data: BaseBranchData) -> None:
    data_path = get_data_path()

    data_text = json.dumps(data.to_json(), indent=2)
    data_path.write_text(data_text)

##### API #####

class UserError(Exception):
    pass

class NotOnBranchError(UserError):
    def __str__(self):
        return 'Not currently on a branch'

class MissingBranchError(UserError):
    def __init__(self, branch: str):
        self.branch = branch

    def __str__(self):
        return f'Branch `{self.branch}` does not exist'

def get_all_registered_branches(data: BaseBranchData) -> List[str]:
    return list(data.branches.keys())

def get_branch_info(data: BaseBranchData, branch: str) -> Optional[BranchInfo]:
    return data.branches.get(branch)

def display_branch_info(data: BaseBranchData, branch: str) -> str:
    info = get_branch_info(data, branch)

    branch_display = ''

    if info:
        branch_display += info.base

        if len(info.deps) > 0:
            num_deps = len(info.deps)
            branch_display += f' + {num_deps} '
            branch_display += 'other' if num_deps == 1 else 'others'

        commits_after_base = int(git('rev-list', '--count', '--first-parent', f'{info.base}..HEAD'))
        if commits_after_base > 0:
            branch_display += f' > [+{commits_after_base}]'

        branch_display += ' > '

    branch_display += branch

    return branch_display

def rename_branch(data: BaseBranchData, old_branch: str, new_branch: str) -> None:
    new_branch_data = {}

    for branch, info in data.branches.items():
        if branch == old_branch:
            branch = new_branch
        else:
            info = BranchInfo(
                base=info.base if info.base != old_branch else new_branch,
                deps=[
                    dep if dep != old_branch else new_branch
                    for dep in info.deps
                ],
            )

        new_branch_data[branch] = info

    data.branches = new_branch_data

def set_base_branch(data: BaseBranchData, branch: str, base_branch: str) -> None:
    info = get_branch_info(data, branch)
    if info is None:
        info = BranchInfo(base=base_branch, deps=[])
    else:
        info.base = base_branch

    data.branches[branch] = info

def add_dep_branch(data: BaseBranchData, branch: str, dep_branch: str) -> None:
    info = get_branch_info(data, branch)
    if info is None:
        raise UserError('Could not add branch dependency: `{branch}` is not a registered branch')
    if dep_branch in info.deps:
        raise UserError('Could not add branch dependency: `{branch}` is already a dependency')
    if dep_branch == info.base:
        raise UserError('Could not add branch dependency: `{branch}` is the base branch')
    info.deps.append(dep_branch)

def rm_dep_branch(data: BaseBranchData, branch: str, dep_branch: str) -> None:
    info = get_branch_info(data, branch)
    if info and dep_branch in info.deps:
        info.deps.remove(dep_branch)

def delete_branch(data: BaseBranchData, branch: str) -> None:
    data.branches.pop(branch, None)
    for branch_info in data.branches.values():
        if branch in branch_info.deps:
            branch_info.deps.remove(branch)

##### Undefined helpers #####

class Undefined:
    pass

UNDEFINED = Undefined()

class UseUndefinedError(Exception):
    pass

##### Argument parsing #####

CLICommandMode = Enum(
    'CLICommandMode',
    [
        (x, x)
        for x in (
            'LIST_ALL',
            'SHOW_CURR',
            'GET_BASE',
            'GET_DEPS',
            'GET_DEFAULT_BASE_BRANCH',
            'DISPLAY',
            'RENAME_TO',
            'SET_BASE',
            'ADD_DEP',
            'RM_DEP',
            'CLEAR',
        )
    ]
)

T = TypeVar('T')

# Semantically indicates that a parameter is guaranteed to be defined
# if the mode requires it to be.
ModeDependent = Union[Undefined, T]

class CLICommand:
    def __init__(
        self,
        mode: CLICommandMode,
        *,
        branch: ModeDependent[Optional[str]] = UNDEFINED,
        new_branch: ModeDependent[str] = UNDEFINED,
        base: ModeDependent[str] = UNDEFINED,
        dep: ModeDependent[str] = UNDEFINED,
    ):
        self._mode = mode
        self._branch = branch
        self._new_branch = new_branch
        self._base = base
        self._dep = dep

    @property
    def mode(self):
        return self._mode

    @property
    def branch(self) -> str:
        if self._branch is UNDEFINED:
            raise UseUndefinedError()

        branch = self._branch

        if branch is None:
            branch = get_current_branch()

        if not branch_exists(branch):
            raise MissingBranchError(branch)

        return branch

    @property
    def new_branch(self) -> str:
        if self._new_branch is UNDEFINED:
            raise UseUndefinedError()

        return self._new_branch

    @property
    def base(self) -> str:
        if self._base is UNDEFINED:
            raise UseUndefinedError()

        return self._base

    @property
    def dep(self) -> str:
        if self._dep is UNDEFINED:
            raise UseUndefinedError()

        return self._dep

def parse_args() -> CLICommand:
    parser = argparse.ArgumentParser()

    parser.add_argument('branch', nargs='?')

    group = parser.add_mutually_exclusive_group()
    group.add_argument('--list', '-l', action='store_true', default=None)
    group.add_argument('--base', action='store_true', default=None)
    group.add_argument('--deps', action='store_true', default=None)
    group.add_argument('--default-base-branch', action='store_true', default=None)
    group.add_argument('--display', action='store_true', default=None)
    group.add_argument('--rename-to')
    group.add_argument('--set-base')
    group.add_argument('--add-dep')
    group.add_argument('--rm-dep')
    group.add_argument('--clear', action='store_true', default=None)

    args = parser.parse_args()

    if args.list:
        if args.branch is not None:
            raise parser.error('`--list` or `-l` cannot be specified with any other arguments')

        return CLICommand(mode=CLICommandMode.LIST_ALL)

    if args.base:
        return CLICommand(mode=CLICommandMode.GET_BASE, branch=args.branch)

    if args.deps:
        return CLICommand(mode=CLICommandMode.GET_DEPS, branch=args.branch)

    if args.default_base_branch:
        return CLICommand(mode=CLICommandMode.GET_DEFAULT_BASE_BRANCH, branch=args.branch)

    if args.display:
        return CLICommand(mode=CLICommandMode.DISPLAY, branch=args.branch)

    if args.rename_to:
        return CLICommand(mode=CLICommandMode.RENAME_TO, branch=args.branch, new_branch=args.rename_to)

    if args.set_base:
        return CLICommand(mode=CLICommandMode.SET_BASE, branch=args.branch, base=args.set_base)

    if args.add_dep:
        return CLICommand(mode=CLICommandMode.ADD_DEP, branch=args.branch, dep=args.add_dep)

    if args.rm_dep:
        return CLICommand(mode=CLICommandMode.RM_DEP, branch=args.branch, dep=args.rm_dep)

    if args.clear:
        return CLICommand(mode=CLICommandMode.CLEAR, branch=args.branch)

    return CLICommand(mode=CLICommandMode.SHOW_CURR, branch=args.branch)

##### Git helpers #####

def get_current_branch() -> str:
    branch = git('branch', '--show-current')
    if len(branch) == 0:
        raise NotOnBranchError()
    return branch

def branch_exists(branch: str) -> bool:
    try:
        git('show-ref', '--heads', branch)
    except subprocess.CalledProcessError:
        return False
    else:
        return True

def get_default_base_branch() -> str:
    if branch_exists('main'):
        return 'main'

    if branch_exists('master'):
        return 'master'

    remote_info = git('remote', 'show', 'origin')
    return re.search('HEAD branch: (.*)$', remote_info, flags=re.M).group(1)

def git(*args) -> str:
    return subprocess.check_output(['git'] + list(args)).decode().strip()

##### Entrypoint #####

if __name__ == '__main__':
    try:
        main()
    except UserError as e:
        print(f'(git-bb) ERROR: {e}', file=sys.stderr)
        sys.exit(1)
