#!/usr/bin/env python3

import abc
import argparse
import contextlib
import sys
from pathlib import Path
from typing import Optional

HERE = Path(__file__).resolve().parent
sys.path.insert(0, (HERE.parent / 'git-bb').as_posix())

from git_bb.api import *
from git_bb.git import *
from git_bb.store import *

def main() -> None:
    command = parse_args()
    try:
        data = load_data()
        command.run(data)
    except Exception as e:
        print(f'(git-bb) ERROR: {e}', file=sys.stderr)
        sys.exit(1)

def parse_args() -> "CLICommand":
    parser = argparse.ArgumentParser()

    parser.add_argument('branch', nargs='?')
    parser.add_argument('--json', action='store_true')

    group = parser.add_mutually_exclusive_group()
    group.add_argument('--list', '-l', action='store_true', default=None)
    group.add_argument('--base', action='store_true', default=None)
    group.add_argument('--deps', action='store_true', default=None)
    group.add_argument('--default-base-branch', action='store_true', default=None)
    group.add_argument('--display', action='store_true', default=None)
    group.add_argument('--rename-to')
    group.add_argument('--set-base')
    group.add_argument('--add-dep', metavar='DEP', nargs='+')
    group.add_argument('--rm-dep', metavar='DEP', nargs='+')
    group.add_argument('--clear', action='store_true', default=None)

    args = parser.parse_args()

    if args.list:
        if args.branch is not None:
            raise parser.error('`--list` or `-l` cannot be specified with any other arguments')

        return CLICommandListAll(as_json=args.json)

    if args.base:
        return CLICommandGetBase(branch=args.branch)

    if args.deps:
        return CLICommandGetDeps(branch=args.branch)

    if args.default_base_branch:
        return CLICommandGetDefaultBaseBranch(branch=args.branch)

    if args.display:
        return CLICommandDisplay(branch=args.branch)

    if args.rename_to:
        return CLICommandRenameTo(branch=args.branch, new_branch=args.rename_to)

    if args.set_base:
        return CLICommandSetBase(branch=args.branch, base=args.set_base)

    if args.add_dep:
        return CLICommandAddDep(branch=args.branch, deps=args.add_dep)

    if args.rm_dep:
        return CLICommandRemoveDep(branch=args.branch, deps=args.rm_dep)

    if args.clear:
        return CLICommandClear(branch=args.branch)

    return CLICommandShowBranch(branch=args.branch, as_json=args.json)

##### CLI Commands #####

class CLICommand(abc.ABC):
    @abc.abstractmethod
    def run(self, data: BaseBranchData):
        pass

class CLIBranchCommand(CLICommand):
    def __init__(self, *, branch: Optional[str]):
        self._branch = branch

    @property
    def branch(self) -> str:
        return resolve_branch(self._branch)

class CLICommandListAll(CLICommand):
    def __init__(self, *, as_json: bool = False):
        super().__init__()
        self._as_json = as_json

    def run(self, data: BaseBranchData):
        print_branch_info(data, get_all_registered_branches(data), as_json=self._as_json)

class CLICommandGetBase(CLIBranchCommand):
    def run(self, data: BaseBranchData):
        with contextlib.suppress(NotOnBranchError):
            info = get_branch_info(data, self.branch)
            if info:
                print(info.base)

class CLICommandGetDeps(CLIBranchCommand):
    def run(self, data: BaseBranchData):
        with contextlib.suppress(NotOnBranchError):
            info = get_branch_info(data, self.branch)
            if info:
                for dep in info.deps:
                    print(dep)

class CLICommandGetDefaultBaseBranch(CLIBranchCommand):
    def run(self, data: BaseBranchData):
        print(get_default_base_branch())

class CLICommandDisplay(CLIBranchCommand):
    def run(self, data: BaseBranchData):
        with contextlib.suppress(NotOnBranchError):
            branch_display = display_branch_info(data, self.branch)
            print(branch_display)

class CLICommandRenameTo(CLIBranchCommand):
    def __init__(self, *, branch: Optional[str], new_branch: str):
        super().__init__(branch=branch)
        self._new_branch = new_branch

    def run(self, data: BaseBranchData):
        # allow renaming branches that don't exist anymore
        try:
            branch = self.branch
        except MissingBranchError as e:
            branch = e.branch

        rename_branch(data, branch, self._new_branch)
        save_data(data)
        print(f'Renamed branch `{branch}` to `{self._new_branch}`')

class CLICommandSetBase(CLIBranchCommand):
    def __init__(self, *, branch: Optional[str], base: str):
        super().__init__(branch=branch)
        self._base = base

    def run(self, data: BaseBranchData):
        base_branch = resolve_branch(self._base)

        set_base_branch(data, self.branch, base_branch)
        save_data(data)
        print(f'Set `{base_branch}` as base branch for `{self.branch}`')

class CLICommandAddDep(CLIBranchCommand):
    def __init__(self, *, branch: Optional[str], deps: str):
        super().__init__(branch=branch)
        self._deps = deps

    def run(self, data: BaseBranchData):
        for dep in self._deps:
            dep = resolve_branch(dep)
            add_dep_branch(data, self.branch, dep)

        save_data(data)
        print(f'Added branch dependencies for `{self.branch}`: ' + ', '.join(self._deps))

class CLICommandRemoveDep(CLIBranchCommand):
    def __init__(self, *, branch: Optional[str], deps: str):
        super().__init__(branch=branch)
        self._deps = deps

    def run(self, data: BaseBranchData):
        for dep in self._deps:
            rm_dep_branch(data, self.branch, dep)

        save_data(data)
        print(f'Removed branch dependencies for `{self.branch}`: ' + ', '.join(self._deps))

class CLICommandClear(CLIBranchCommand):
    def run(self, data: BaseBranchData):
        # allow clearing branches that don't exist anymore
        try:
            branch = self.branch
        except MissingBranchError as e:
            branch = e.branch

        delete_branch(data, branch)
        save_data(data)
        print(f'Deleted branch `{branch}` from base-branch database')

class CLICommandShowBranch(CLIBranchCommand):
    def __init__(self, *, branch: str, as_json: bool = False):
        super().__init__(branch=branch)
        self._as_json = as_json

    def run(self, data: BaseBranchData):
        print_branch_info(data, [self.branch], as_json=self._as_json)

def print_branch_info(
    data: BaseBranchData,
    branches: List[str],
    *,
    as_json: bool = False,
) -> None:
    infos = [
        get_branch_info(data, branch, missing_ok=False)
        for branch in branches
    ]

    if as_json:
        o = [
            {
                "branch": info.name,
                "base": info.base,
                "deps": info.deps,
            }
            for info in infos
        ]
        print(json.dumps(o))
    else:
        branch_outputs = []
        for info in infos:
            deps = ', '.join(info.deps)
            branch_outputs.append(
                '\n'.join([
                    info.name,
                    f' ├─ base = {info.base}',
                    f' └─ deps = [{deps}]',
                ])
            )
        print('\n\n'.join(branch_outputs))

##### Entrypoint #####

if __name__ == '__main__':
    main()
