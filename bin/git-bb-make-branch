#!/usr/bin/env python3

"""Create and checkout a new branch."""

import argparse
import functools
import subprocess
import sys
from pathlib import Path
from typing import List, Optional

HERE = Path(__file__).resolve().parent
sys.path.insert(0, (HERE.parent / 'git-bb').as_posix())

from git_bb.api import (
    APIError,
    add_dep_branches,
    get_merge_deps_command,
    set_base_branch,
)
from git_bb.git import (
    get_default_base_branch,
    get_current_branch,
    git,
    git_exec,
)
from git_bb.store import load_data, save_data
from git_bb.utils import abort as abort_

abort = functools.partial(abort_, prefix='git-bb-make-branch')

### Git ###

def get_modified_files() -> List[str]:
    return git('ls-files', '-m').splitlines()

### Implementation ###

def make_branch(
    new_branch: str,
    base_branch: str,
    deps: Optional[List[str]],
    persist_modified: bool,
):
    if deps is not None:
        if len(deps) == 0:
            deps = [get_current_branch()]
        deps = [dep for dep in deps if dep != base_branch]

    has_stash = False

    if len(get_modified_files()) > 0:
        if persist_modified:
            git_exec("stash", "push")
            has_stash = True
        else:
            abort('There are modified files')

    try:
        git_exec("checkout", "-b", new_branch, base_branch)
    except subprocess.CalledProcessError as e:
        abort(str(e))

    data = load_data()
    set_base_branch(data, new_branch, base_branch=base_branch)
    if deps:
        add_dep_branches(data, new_branch, deps)
    save_data(data)

    if deps:
        cmd = get_merge_deps_command(deps)
        print('Running: ' + ' '.join(cmd))
        subprocess.check_call(cmd)

    if has_stash:
        git_exec("stash", "pop")

### Entrypoint ###

def main():
    args = parse_args()

    try:
        make_branch(
            new_branch=args.branch,
            base_branch=args.base,
            deps=args.add_dep,
            persist_modified=args.stash,
        )
    except APIError as e:
        abort(str(e))

def parse_args():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        'branch',
        metavar='BRANCH',
        help='The name of the branch to create',
    )
    parser.add_argument(
        'base',
        metavar='BASE',
        nargs='?',
        help='The base branch for the new branch (defaults to %(default)s)',
        default=get_default_base_branch(),
    )
    parser.add_argument(
        '--add-dep',
        metavar='DEP',
        nargs='*',
        help=(
            'Branches to add as dependencies for the new branch. '
            'If none are provided, will add the current branch as a dependency.'
        ),
    )
    parser.add_argument(
        '--stash',
        action='store_true',
        help=(
            'If there are modified files, stash and unstash '
            'the changes while setting up the new branch'
        ),
    )
    return parser.parse_args()

if __name__ == '__main__':
    main()
